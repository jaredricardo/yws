<link rel="stylesheet" href="{{ 'component-list-menu.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-search.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-menu-drawer.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-cart-notification.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-cart-items.css' | asset_url }}" media="print" onload="this.media='all'">

{%- if settings.cart_type == "drawer" -%}
  {{ 'component-cart-drawer.css' | asset_url | stylesheet_tag }}
  {{ 'component-cart.css' | asset_url | stylesheet_tag }}
  {{ 'component-totals.css' | asset_url | stylesheet_tag }}
  {{ 'component-price.css' | asset_url | stylesheet_tag }}
  {{ 'component-discounts.css' | asset_url | stylesheet_tag }}
{%- endif -%}

<noscript>{{ 'component-list-menu.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-search.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-menu-drawer.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-cart-notification.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-cart-items.css' | asset_url | stylesheet_tag }}</noscript>

<script src="{{ 'details-disclosure.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'details-modal.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'cart-notification.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'search-form.js' | asset_url }}" defer="defer"></script>
{%- if settings.cart_type == "drawer" -%}
  <script src="{{ 'cart-drawer.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

<style>
  {%- if section.settings.menu_type_desktop != "drawer" -%}
    @media screen and (min-width: 990px) {
      header-drawer {
        display: none;
      }
    }
  {%- endif -%}
</style>

{% assign color_blocks = section.blocks | where: 'type', 'color-designation' %}

{% for block in color_blocks %}
  {% if request.path contains block.settings.check_url and block.settings.check_url != blank %}
    <style>
      yws-sticky-header.scrolled-in {
        {% unless block.settings.enable_color_gradient %}
          background: transparent !important;
        {% endunless %}
        {% if block.settings.enable_color_gradient %}
          background: linear-gradient(to bottom,{{ block.settings.header_gradient_color }},transparent) !important
        {% endif %}
      }
      yws-sticky-header.scrolled-in svg path {
        fill: {{ block.settings.header_designation_color }} !important;
      }

    </style>
  {% endif %}
{% endfor %}

<yws-sticky-header>
  <div class="col yws-header__letters">
    <a href="{{ routes.root_url }}">
      {% render 'yws-y' %}
      {% render 'yws-w' %}
      {% render 'yws-s' %}
    </a>
  </div>
  <div class="col yws-header__logo-text" style="width:100%">
    {% render 'yws-header-text' %}
  </div>
  <div class="col yws-header__icons">
    <a href="{{ routes.cart_url }}" class="header__icon header__icon--cart link focus-inset" id="cart-icon-bubble">
      {% render 'yws-cart' %}
      <span class="visually-hidden">{{ 'templates.cart.cart' | t }}</span>
    </a>
    <yws-burger>
      {% render 'yws-burger' %}
    </yws-burger>
  </div>
</yws-sticky-header>

<style>

  yws-sticky-header .yws-header__logo-text a {
    transition: 0ms;  
  }
  yws-sticky-header .yws-header__logo-text a:hover {
    opacity: 1 !important;
  }

  yws-sticky-header .yws-header__logo-text:has(a:hover) a:not(:hover) {
    opacity: 0.5 !important;
  }

  {% if request.path contains settings.work_url or request.path contains settings.york_url or request.path contains settings.shop_url %}

    yws-sticky-header .yws-header__logo-text a {
      opacity: 0.5
    }

    yws-sticky-header .yws-header__logo-text a.active {
      opacity: 1;
    }


  {% else %}
    /* Initial state for all anchor elements */
    yws-sticky-header .yws-header__logo-text a {
      opacity: 1;
    }

  {% endif %}
</style>

<script>
  window.addEventListener('DOMContentLoaded', () => {


  // const logoAnchors = document.querySelectorAll('.yws-header__logo-text svg')

  // logoAnchors.forEach((anchor) => {
  //   anchor.addEventListener('mouseover', () => {
  //     logoAnchors.forEach((a) => {
  //       a.style.transition = '0ms'
  //       a.style.opacity = 0.3
  //     })
  //     anchor.style.opacity = 1
  //   })
  //   anchor.addEventListener('mouseleave', () => {
  //     logoAnchors.forEach((a) => {
  //       a.style.opacity = 1
  //       a.style.transition = '500ms'
  //     })
  //   })
  // })
 

  class YWSStickyHeader extends HTMLElement {
    constructor() {
      super()
        this.sections = document.querySelectorAll('.header-scrollable-section')
        this.logoArea = document.querySelector('.yws-header__logo-text')
        if(this.sections.length < 1) {
          this.classList.add('scrolled-in')
        } else {
          this.observer = new IntersectionObserver(this.handleIntersect.bind(this), {
            threshold: Array.from({ length: 1001 }, (_, i) => i / 1000) // Thresholds from 0 to 1 in 0.001 increments
          })
          this.sections.forEach(section => this.observer.observe(section))
        }
      }

      handleIntersect(entries) {
        entries.forEach(entry => {
          // in first section 
          if(entry.target === this.sections[0]) {
            this.updateWidth(1 - entry.intersectionRatio)
            entry.intersectionRatio === 1 ? this.setWidth(100) : null
            if(entry.intersectionRatio > 0.12) {
              this.classList.remove('scrolled-in') 
            } else {
              this.classList.add('scrolled-in')
            }
          }
        })
      }

      updateWidth(ratio) {
        const newWidth = 100 - (66.7 * ratio) // Width from 100% to 33.3% based on the ratio
        this.logoArea.style.width = `${newWidth}%`
      }

      setWidth(width) {
        this.logoArea.style.width = `${width}%`
      }
    }

    class YWSMenuDrawer extends HTMLElement {
      constructor() {
        super()
        this.cartButton = this.querySelector('#header-cart-button')
        this.closeCartButton = this.querySelector('#header-close-menu-button')
        this.closeCartButton.addEventListener('click', this.closeDrawer)
        this.cartButton.addEventListener('click', this.openCartFromNav) 
      }

      closeDrawer() {
        document.querySelector('#CartDrawer-Overlay').click()
      }

      openCartFromNav() {
        document.querySelector('#CartDrawer-Overlay').click()
        setTimeout(() => {
          document.querySelector('.yws-header__icons .header__icon--cart').click()
        }, 250)
      }

    }
  
    class YWSBurger extends HTMLElement {
      constructor() {
        super()
        this.addEventListener('click', this.showMenu)
      }

      showMenu() {
        // cheap way of opening the "cart" which is also being used as the new nav 
        document.querySelector('#cart-icon-bubble').click()
        // show correct drawer content
        document.querySelector('.drawer__inner-empty').classList.add('hidden')
        document.querySelector('yws-menu-drawer').classList.add('active')
      }
    }

    customElements.define('yws-sticky-header', YWSStickyHeader)
    customElements.define('yws-menu-drawer', YWSMenuDrawer)
    customElements.define('yws-burger', YWSBurger)
  })
</script>
 
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Organization",
    "name": {{ shop.name | json }},
    {% if settings.logo %}
      "logo": {{ settings.logo | image_url: width: 500 | prepend: "https:" | json }},
    {% endif %}
    "sameAs": [
      {{ settings.social_twitter_link | json }},
      {{ settings.social_facebook_link | json }},
      {{ settings.social_pinterest_link | json }},
      {{ settings.social_instagram_link | json }},
      {{ settings.social_tiktok_link | json }},
      {{ settings.social_tumblr_link | json }},
      {{ settings.social_snapchat_link | json }},
      {{ settings.social_youtube_link | json }},
      {{ settings.social_vimeo_link | json }}
    ],
    "url": {{ request.origin | append: page.url | json }}
  }
</script>

{%- if request.page_type == 'index' -%}
  {% assign potential_action_target = request.origin | append: routes.search_url | append: "?q={search_term_string}" %}
  <script type="application/ld+json">
    {
      "@context": "http://schema.org",
      "@type": "WebSite",
      "name": {{ shop.name | json }},
      "potentialAction": {
        "@type": "SearchAction",
        "target": {{ potential_action_target | json }},
        "query-input": "required name=search_term_string"
      },
      "url": {{ request.origin | append: page.url | json }}
    }
  </script>
{%- endif -%}

{% schema %}
{
  "name": "t:sections.header.name",
  "class": "section-header",
  "max_blocks": 3,
  "settings": [
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.header.settings.menu.label"
    }
  ],
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "color-designation",
      "name": "Color Designation",
      "settings": [
        {
          "type": "url",
          "id": "check_url",
          "label": "Color Designation URL string",
          "info": "page / url to check where to use the following colors"
        },
        {
          "type": "color",
          "id": "header_designation_color",
          "label": "Text / SVG color for given URL"
        },
        {
          "type": "checkbox",
          "id": "enable_color_gradient",
          "label": "Enable Color Gradient",
          "info": "If this box is checked, it will allow for the color backdrop gradient to be shown in the sticky header",
          "default": true
        },
        {
          "type": "color",
          "id": "header_gradient_color",
          "label": "Sticky header gradient color (if enabled)" 
        }
      ]
    }
  ]
}
{% endschema %}
