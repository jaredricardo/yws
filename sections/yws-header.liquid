<link rel="stylesheet" href="{{ 'component-list-menu.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-search.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-menu-drawer.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-cart-notification.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-cart-items.css' | asset_url }}" media="print" onload="this.media='all'">

{%- if settings.cart_type == "drawer" -%}
  {{ 'component-cart-drawer.css' | asset_url | stylesheet_tag }}
  {{ 'component-cart.css' | asset_url | stylesheet_tag }}
  {{ 'component-totals.css' | asset_url | stylesheet_tag }}
  {{ 'component-price.css' | asset_url | stylesheet_tag }}
  {{ 'component-discounts.css' | asset_url | stylesheet_tag }}
{%- endif -%}

<noscript>{{ 'component-list-menu.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-search.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-menu-drawer.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-cart-notification.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-cart-items.css' | asset_url | stylesheet_tag }}</noscript>

<script src="{{ 'details-disclosure.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'details-modal.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'cart-notification.js' | asset_url }}" defer="defer"></script>
<script src="{{ 'search-form.js' | asset_url }}" defer="defer"></script>
{%- if settings.cart_type == "drawer" -%}
  <script src="{{ 'cart-drawer.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

<style>
  {%- if section.settings.menu_type_desktop != "drawer" -%}
    @media screen and (min-width: 990px) {
      header-drawer {
        display: none;
      }
    }
  {%- endif -%}
</style>

<yws-sticky-header>
  <div class="col yws-header__letters">
    {% render 'yws-y' %}
    {% render 'yws-w' %}
    {% render 'yws-s' %}
  </div>
  <div class="col yws-header__logo-text" style="width:100%">
    {% render 'yws-header-text' %}
  </div>
  <div class="col yws-header__icons">
    <a href="{{ routes.cart_url }}" class="header__icon header__icon--cart link focus-inset" id="cart-icon-bubble">
      {% render 'yws-cart' %}
      <span class="visually-hidden">{{ 'templates.cart.cart' | t }}</span>
    </a>
    <yws-burger>
      {% render 'yws-burger' %}
    </yws-burger>
  </div>
</yws-sticky-header>

<script>
  window.addEventListener('DOMContentLoaded', () => {

  const logoPaths = document.querySelectorAll('.yws-header__logo-text path')

  logoPaths.forEach((path) => {
    path.addEventListener('mouseover', () => {
      logoPaths.forEach((p) => {
        p.style.transition = '0ms'
        p.style.opacity = 0.3
      })
      path.style.opacity = 1
    })
    path.addEventListener('mouseleave', () => {
      logoPaths.forEach((p) => {
        p.style.opacity = 1
        p.style.transition = '500ms'
      })
     
    })
  })

  class YWSStickyHeader extends HTMLElement {
    constructor() {
      super()
      this.observer = new IntersectionObserver(this.handleIntersect.bind(this), {
        threshold: Array.from({ length: 1001 }, (_, i) => i / 1000) // Thresholds from 0 to 1 in 0.001 increments
      })
        this.sections = document.querySelectorAll('.header-scrollable-section')
        this.logoArea = document.querySelector('.yws-header__logo-text')
        this.hasExitedFirst = false
        this.sections.forEach(section => this.observer.observe(section))
      }

      handleIntersect(entries) {
        entries.forEach(entry => {
          if (entry.target === this.sections[1]) { // Check if the entry is the second section
            if (entry.isIntersecting) {
              if (entry.intersectionRatio > 0.95) {
                this.classList.add('scrolled-in')
                this.setWidth(33.3) // Set width to 33.3%
              } else {
                this.updateWidth(entry.intersectionRatio)
              }
            }
          } else if (entry.target === this.sections[0]) { // Check if the entry is the first section
            this.hasExitedFirst = false
            this.classList.remove('scrolled-in')
            if (entry.intersectionRatio === 1) { // If the first section is fully in view
              this.setWidth(100) // Set width to 100%
              this.hasExitedFirst = false
            } else if (entry.intersectionRatio === 0) {
              this.hasExitedFirst = true
            } 
          }
          // fallback if we scroll to fast passed the first section to add the scrolled in class
          if(entry.isIntersecting === false) {
            this.classList.add('scrolled-in')
          }
        })
      }

      updateWidth(ratio) {
        const newWidth = 100 - (66.7 * ratio) // Width from 100% to 33.3% based on the ratio
        this.logoArea.style.width = `${newWidth}%`
      }

      setWidth(width) {
        this.logoArea.style.width = `${width}%`
      }
    }

    class YWSMenuDrawer extends HTMLElement {
      constructor() {
        super()
        this.cartButton = this.querySelector('#header-cart-button')
        this.closeCartButton = this.querySelector('#header-close-menu-button')
        this.closeCartButton.addEventListener('click', this.closeDrawer)
        this.cartButton.addEventListener('click', this.openCartFromNav) 
      }

      closeDrawer() {
        document.querySelector('#CartDrawer-Overlay').click()
      }

      openCartFromNav() {
        document.querySelector('#CartDrawer-Overlay').click()
        setTimeout(() => {
          document.querySelector('.yws-header__icons .header__icon--cart').click()
        }, 250)
      }

    }
  
    class YWSBurger extends HTMLElement {
      constructor() {
        super()
        this.addEventListener('click', this.showMenu)
      }

      showMenu() {
        // cheap way of opening the "cart" which is also being used as the new nav 
        document.querySelector('#cart-icon-bubble').click()
        // show correct drawer content
        document.querySelector('.drawer__inner-empty').classList.add('hidden')
        document.querySelector('yws-menu-drawer').classList.add('active')
      }
    }

    customElements.define('yws-sticky-header', YWSStickyHeader)
    customElements.define('yws-menu-drawer', YWSMenuDrawer)
    customElements.define('yws-burger', YWSBurger)
  })
</script>
 
<script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "Organization",
    "name": {{ shop.name | json }},
    {% if settings.logo %}
      "logo": {{ settings.logo | image_url: width: 500 | prepend: "https:" | json }},
    {% endif %}
    "sameAs": [
      {{ settings.social_twitter_link | json }},
      {{ settings.social_facebook_link | json }},
      {{ settings.social_pinterest_link | json }},
      {{ settings.social_instagram_link | json }},
      {{ settings.social_tiktok_link | json }},
      {{ settings.social_tumblr_link | json }},
      {{ settings.social_snapchat_link | json }},
      {{ settings.social_youtube_link | json }},
      {{ settings.social_vimeo_link | json }}
    ],
    "url": {{ request.origin | append: page.url | json }}
  }
</script>

{%- if request.page_type == 'index' -%}
  {% assign potential_action_target = request.origin | append: routes.search_url | append: "?q={search_term_string}" %}
  <script type="application/ld+json">
    {
      "@context": "http://schema.org",
      "@type": "WebSite",
      "name": {{ shop.name | json }},
      "potentialAction": {
        "@type": "SearchAction",
        "target": {{ potential_action_target | json }},
        "query-input": "required name=search_term_string"
      },
      "url": {{ request.origin | append: page.url | json }}
    }
  </script>
{%- endif -%}

{% schema %}
{
  "name": "t:sections.header.name",
  "class": "section-header",
  "max_blocks": 3,
  "settings": [
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.header.settings.menu.label"
    }
  ],
  "blocks": [
    {
      "type": "@app"
    }
  ]
}
{% endschema %}
